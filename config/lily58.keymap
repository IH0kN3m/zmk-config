/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

/ {
    keymap {
        compatible = "zmk,keymap";

        letter_layer {
            // ------------------------------------------------------------------------------------------------------------
            // |  ESC  |  1  |  2  |  3   |  4   |  5   |                   |  6   |  7    |  8    |  9   |   0   |   `   |
            // |  TAB  |  Q  |  W  |  E   |  R   |  T   |                   |  Y   |  U    |  I    |  O   |   P   |   -   |
            // |  CTRL |  A  |  S  |  D   |  F   |  G   |                   |  H   |  J    |  K    |  L   |   ;   |   '   |
            // | SHIFT |  Z  |  X  |  C   |  V   |  B   |   "["  |  |  "]"  |  N   |  M    |  ,    |  .   |   /   | SHIFT |
            //                     | ALT  | GUI  | LOWER|  SPACE |  | ENTER | RAISE| BSPC  | GUI   |

            bindings = <
&mt LC(SPACE) ESC  &kp N1  &kp N2  &kp N3  &kp N4        &kp N5                               &kp N6         &kp N7    &kp N8     &kp N9   &kp N0    &kp GRAVE
&kp TAB            &kp Q   &kp W   &kp E   &kp R         &kp T                                &kp Y          &kp U     &kp I      &kp O    &kp P     &kp MINUS
&kp LCTRL          &kp A   &kp S   &kp D   &kp F         &kp G                                &kp H          &kp J     &kp K      &kp L    &kp SEMI  &kp SQT
&kp LSHFT          &kp Z   &kp X   &kp C   &kp V         &kp B         &kp LBKT     &kp RBKT  &kp N          &kp M     &kp COMMA  &kp DOT  &kp FSLH  &kp RSHFT
                                   &to 1   &kp LEFT_ALT  &kp LEFT_GUI  &kp SPACE    &kp RET   &kp BACKSPACE  &kp RGUI  &to 2
            >;

            sensor-bindings = <&inc_dec_kp C_VOL_UP C_VOL_DN>;
        };

        navigation_layer {
            // --------------------------------------------------------------------------------------------------------------
            // | LPAD  | BRDn | BRUp |  MUT |  Vo- |  Vo+ |                   |      |       |       |      |       |       |
            // |  F1   |  F2  |  F3  |  F4  |  F5  |  F6  |                   |  F7  |  F8   |  F9   |  F10 |  F11  |  F12  |
            // |   `   |  !   |  @   |  #   |  $   |  %   |                   |  ^   |  &    |  *    |  (   |   )   |   ~   |
            // |       |      |      |      |      |      |        |  |       |      |  _    |  +    |  {   |   }   |  "|"  |
            //                       |      |      |      |        |  |       |      |       |       |

            bindings = <
&kp C_POWER      &kp C_BRI_DN                       &kp C_BRI_UP                       &kp C_MUTE                         &kp C_VOL_DN                       &kp C_VOL_UP                                                        &none                              &none                              &none                              &none                              &none  &none
&kp LA(Z)        &mt LA(LS(NUMBER_1)) LA(NUMBER_1)  &mt LA(LS(NUMBER_2)) LA(NUMBER_2)  &mt LA(LS(NUMBER_3)) LA(NUMBER_3)  &mt LA(LS(NUMBER_4)) LA(NUMBER_4)  &mt LA(LS(NUMBER_5)) LA(NUMBER_5)                                   &mt LA(LS(NUMBER_6)) LA(NUMBER_6)  &mt LA(LS(NUMBER_7)) LA(NUMBER_7)  &mt LA(LS(NUMBER_8)) LA(NUMBER_8)  &mt LA(LS(NUMBER_9)) LA(NUMBER_9)  &none  &none
&mt LA(C) LA(X)  &mt LA(LS(A)) LA(A)                &mt LA(LS(S)) LA(S)                &mt LA(LS(D)) LA(D)                &mt LA(LS(F)) LA(F)                &mt LA(LS(G)) LA(G)                                                 &kp LEFT                           &kp DOWN_ARROW                     &kp UP_ARROW                       &kp RIGHT_ARROW                    &none  &none
&trans           &kp LA(LS(TAB))                    &none                              &none                              &none                              &none                              &none             &none          &none                              &none                              &none                              &none                              &none  &none
                                                                                       &to 0                              &trans                             &trans                             &kp LEFT_SHIFT    &kp RIGHT_ALT  &none                              &none                              &to 2
            >;
        };

        service_layer {
            // ------------------------------------------------------------------------------------------------------------
            // |       |     |     |      |      |      |                   |      |       |       |      |       |       |
            // |   `   |  1  |  2  |  3   |  4   |  5   |                   |  6   |   7   |   8   |  9   |   0   |       |
            // |   F1  |  F2 |  F3 |  F4  |  F5  |  F6  |                   |      |   <-  |   v   |  ^   |  ->   |       |
            // |   F7  |  F8 |  F9 |  F10 |  F11 |  F12 |        |  |       |  +   |   -   |   =   |  [   |   ]   |   \   |
            //                     |      |      |      |        |  |       |      |       |       |

            bindings = <
&none  &none  &none  &none   &none   &none                     &bt BT_CLR  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4
&none  &none  &none  &none   &none   &none                     &none       &none         &none         &none         &none         &none
&none  &none  &none  &none   &none   &none                     &none       &none         &none         &none         &none         &none
&none  &none  &none  &none   &none   &none   &none     &none   &none       &none         &none         &none         &none         &none
                     &trans  &trans  &trans  &trans    &trans  &trans      &trans        &to 0
            >;

            sensor-bindings = <&inc_dec_kp C_VOL_UP C_VOL_DN>;
        };
    };
};
